import meta.state.PlayState;
import gameObjects.character.AtlasCharacter;
import graphics.FunkinSprite;
import flxanimate.FlxAnimate;
import flixel.FlxG;
import meta.modding.base.ScriptedFlxSpriteGroup;

import flixel.group.FlxTypedSpriteGroup;
import Paths;
class Nene extends AtlasCharacter 
{
    //DO NOT THINK NENE FROM HOLOLIVE
    //DO NOT THINK NENE FROM HOLOLIVE
    //DO NOT THINK NENE FROM HOLOLIVE
    //DO NOT THINK NENE FROM HOLOLIVE
    function new() {
		super('nene');
	}
    
    var abot:FlxAnimate;
    var pupil:FlxAnimate;
    var abotViz:ScriptedFlxSpriteGroup;
	var stereoBG:FunkinSprite;
	var eyeWhites:FunkinSprite;
    var folder:String = 'characters/abot/';

	var abotGroup:FlxTypedSpriteGroup;
    function onCreate(event:ScriptEvent) 
    {
        super.onCreate(event);

		abotGroup = new FlxTypedSpriteGroup();
		
        stereoBG = new FunkinSprite().loadImage(folder + 'stereoBG');
		abotGroup.add(stereoBG);

		abotViz = new ABotVis(this.x + 50, this.y);
		abotGroup.add(abotViz);

        eyeWhites = new FunkinSprite().makeSolidColor(160, 60);
		abotGroup.add(eyeWhites);

        pupil = new FlxAnimate(this.x, this.y, Paths.animateAtlas(folder + "systemEyes"));
        pupil.anim.addBySymbol('idle', 'a bot eyes lookin', 24, false);
		pupil.anim.play('idle', true);
		pupil.anim.curFrame = pupil.anim.length - 1;
		abotGroup.add(pupil);

        abot = new FlxAnimate(this.x, this.y, Paths.animateAtlas(folder + "abotSystem"));
        abot.anim.addBySymbol('idle', 'Abot System', 24, false);
		abot.anim.play('idle', true);
		abot.anim.curFrame = abot.anim.length - 1;
		abotGroup.add(abot);
    }

    var VULTURE_THRESHOLD = 0.25 * 2;
    var STATE_DEFAULT = 0;
    var STATE_PRE_RAISE = 1;
    var STATE_RAISE = 2;
    var STATE_READY = 3;
    var STATE_LOWER = 4;
    var currentState:Int = STATE_DEFAULT;
    var MIN_BLINK_DELAY:Int = 3;
	var MAX_BLINK_DELAY:Int = 7;
	var blinkCountdown:Int = MIN_BLINK_DELAY;

    function dance(force:Bool) 
    {
        if (abot != null)
            abot.anim.play('idle', force);
		
        switch(currentState) 
        {
            case STATE_DEFAULT:
                playAnim(hasDanced ? 'danceRight' : 'danceLeft', force);
				hasDanced = !hasDanced;
            case STATE_PRE_RAISE:
                playAnim('danceLeft', false);
				hasDanced = false;
            case STATE_READY:
                if(blinkCountdown == 0)
                {
                    playAnim('idleKnife', false);
					blinkCountdown = FlxG.random.int(MIN_BLINK_DELAY, MAX_BLINK_DELAY);
                }
                else
                    blinkCountdown--;
            default:
        }
    }

    public override function onSongEvent(scriptEvent:SongEventScriptEvent)
	{
		super.onSongEvent(scriptEvent);
		if (scriptEvent.eventData.eventKind == "FocusCamera")
		{
			var eventProps = scriptEvent.eventData.value;
			switch (Std.parseInt(eventProps.char)) {
				case 0:
					movePupilsRight();
				case 1:
					movePupilsLeft();
				default:
			}
		}

	}

    function onSongStart(event:ScriptEvent)
    {
		abotViz.initAnalyzer(FlxG.sound.music);
    }

	var refershed:Bool = false;
    function onUpdate(event:UpdateScriptEvent)
    {
        super.onUpdate(event);

		// Set the visibility of ABot to match Nene's.
		abotGroup.visible = this.visible;

		if (pupil != null && pupil.anim.isPlaying)
		{
			switch (pupilState)
			{
				case PUPIL_STATE_NORMAL:
					if (pupil.anim.curFrame >= 17)
					{
						trace('Done moving pupils left');
						pupilState = PUPIL_STATE_LEFT;
						pupil.anim.pause();
					}
				case PUPIL_STATE_LEFT:
					if (pupil.anim.curFrame >= 30)
					{
						trace('Done moving pupils right');
						pupilState = PUPIL_STATE_NORMAL;
						pupil.anim.pause();
					}
			}
		}

		if (!refershed)
		{
			abot.x = this.x - 100;
			abot.y = this.globalOffsets[1] + 540;

			eyeWhites.x = abot.x + 40;
			eyeWhites.y = abot.y + 250;
	
			pupil.x = abot.x + 60;
			pupil.y = abot.y + 240;
	
			stereoBG.x = abot.x + 150;
			stereoBG.y = abot.y + 30;
	
			abotViz.x = abot.x + 200;
			abotViz.y = abot.y + 84;

			abotGroup.zIndex = this.zIndex - 10;
			PlayState.instance.stage.add(abotGroup);
			PlayState.instance.stage.refresh();
			refershed = true;
		}

        transitionState();
    }

    var animationFinished:Bool = false;

	function onAnimationFinished(name:String) 
    {
        super.onAnimationFinished(name);

		switch(currentState) 
        {
            case STATE_RAISE:
				if (name == "raise") {
					animationFinished = true;
					transitionState();
				}
			case STATE_LOWER:
				if (name == "lower") {
					animationFinished = true;
					transitionState();
				}
			default:
        }
    }

    function onAnimationFrame(name:String, frameNumber:Int, frameIndex:Int) 
    {
        super.onAnimationFrame(name, frameNumber, frameIndex);

		switch(currentState) {
			case STATE_PRE_RAISE:
				if (name == "danceLeft" && frameNumber == 13) {
					animationFinished = true;
					transitionState();
				}
			default:
		}
    }

    function transitionState() 
    {
        switch (currentState) 
        {
			case STATE_DEFAULT:
				if (PlayState.instance.health <= VULTURE_THRESHOLD) {
					currentState = STATE_PRE_RAISE;
				} else {
					currentState = STATE_DEFAULT;
				}
			case STATE_PRE_RAISE:
				if (PlayState.instance.health > VULTURE_THRESHOLD) {
					currentState = STATE_DEFAULT;
				} else if (animationFinished) {
					currentState = STATE_RAISE;
					playAnim('raise');
					animationFinished = false;
				}
			case STATE_RAISE:
				if (animationFinished) {
					currentState = STATE_READY;
					animationFinished = false;
				}
			case STATE_READY:
				if (PlayState.instance.health > VULTURE_THRESHOLD) {
					currentState = STATE_LOWER;
					playAnim('lower');
				}
			case STATE_LOWER:
				if (animationFinished) {
					currentState = STATE_DEFAULT;
					animationFinished = false;
				}
			default:
				currentState = STATE_DEFAULT;
		}
    }

    var pupilState:Int = 0;
	var PUPIL_STATE_NORMAL = 0;
	var PUPIL_STATE_LEFT = 1;
    function movePupilsLeft():Void {
		if (pupilState == PUPIL_STATE_LEFT) return;
		trace('Move pupils left');
		pupil.anim.play('idle', true);
		pupil.anim.curFrame = 0;
	}

	function movePupilsRight():Void {
		if (pupilState == PUPIL_STATE_NORMAL) return;
		trace('Move pupils right');
		pupil.anim.play('idle', true);
		pupil.anim.curFrame = 17;
	}
}